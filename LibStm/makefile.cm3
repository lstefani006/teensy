############################################
E?=@
O?=-O0 -ggdb3
OBJ_DIR?=.obj
LIBOPENCM3_LIB?=os
############################################


CPPFLAGS+=$(O)
CPPFLAGS+=$(G)
CPPFLAGS+=-mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd
CPPFLAGS+=-fno-common -ffunction-sections -fdata-sections
CPPFLAGS+=-MD -Wundef
CPPFLAGS+=-DSTM32F1
CPPFLAGS+=-I$(OPENCM3_DIR)/include 
CPPFLAGS+=-fmax-errors=2  # interrompe la compilazio dopo N errori

CXXFLAGS+=-std=c++17 -fno-rtti -fno-exceptions

include ../util/base_makefile.mk

CXXFLAGS+=$(WCXX)
CFLAGS+=$(WC)


OBJ:=$(patsubst %.cpp,%.o,$(SRC))
OBJ:=$(patsubst %.c,%.o,$(OBJ))
OBJ:=$(patsubst %.o,$(OBJ_DIR)/%.o,$(notdir $(OBJ)))

all : $(TARGET).elf

$(TARGET).elf : $(OBJ_DIR)/lib.$(LIBOPENCM3_LIB) $(OBJ)
	$(E)arm-none-eabi-gcc --static -nostartfiles -Tstm32-h103.ld -mthumb \
		-mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd \
		-Wl,-Map=$(TARGET).map -Wl,--gc-sections \
		-L$(OPENCM3_DIR)/lib $(OBJ) -lopencm3_stm32f1 -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group -o $(TARGET).elf
	$(E)arm-none-eabi-objcopy -O binary  "$(TARGET).elf" "$(TARGET).bin"
	$(E)arm-none-eabi-objdump -h -S $(TARGET).elf > $(TARGET).dis
	$(E)arm-none-eabi-size $(TARGET).elf

$(OBJ_DIR)/%.o : %.cpp
	@echo $<
	@mkdir -p $(@D)
	$(E)arm-none-eabi-g++ -c $(CPPFLAGS) $(CXXFLAGS) $< -o $@

$(OBJ_DIR)/%.o : %.c
	@echo $<
	@mkdir -p $(@D)
	$(E)arm-none-eabi-gcc -c $(CPPFLAGS) $(CFLAGS) $< -o $@

$(OBJ_DIR):
	@mkdir $(OBJ_DIR)

clean:
	-rm -f $(OBJ_DIR)/*.o
	-rm -f $(OBJ_DIR)/*.d
	#-rm -rf $(OBJ_DIR)
	-rm -f $(TARGET).elf
	-rm -f $(TARGET).eep
	-rm -f $(TARGET).bin
	-rm -f $(TARGET).dis
	-rm -f $(TARGET).map
	-rm -f compile_commands.json

compile_commands.json :
	make clean
	bear make
	cat $(OPENCM3_DIR)/compile_commands.json >> compile_commands.json

.PHONY: lib.clean gdb map upload

$(OBJ_DIR)/lib.debug:
	@mkdir -p $(@D)
	touch $(OBJ_DIR)/lib.debug
	make -C ../LibStm/libopencm3 V=1 "DEBUG_FLAGS=-O0 -ggdb3"

$(OBJ_DIR)/lib.os:
	@mkdir -p $(@D)
	touch $(OBJ_DIR)/lib.os
	make -C ../LibStm/libopencm3 V=1

lib.clean:
	rm -f $(OBJ_DIR)/lib.os
	rm -f $(OBJ_DIR)/lib.debug
	make -C ../LibStm/libopencm3 V=1 clean

libopencm3: $(OBJ_DIR)/lib.os
	@echo libopencm3 built

gdb: leo.gdbinit
	arm-none-eabi-gdb -tui -x leo.gdbinit $(TARGET).elf

leo.gdbinit:
	echo "target extended-remote /dev/ttyBmpGdb"  >  leo.gdbinit
	echo "mon swdp_scan"                          >> leo.gdbinit
	echo "attach 1"                               >> leo.gdbinit
	echo "set mem inaccessible-by-default off"    >> leo.gdbinit
	echo "monitor vector_catch disable hard"      >> leo.gdbinit
	echo "monitor option erase"                   >> leo.gdbinit
	echo "set print pretty"                       >> leo.gdbinit
	echo "load"                                   >> leo.gdbinit
	echo "b main"                                 >> leo.gdbinit


upload : all
	@ArduinoSerialMonitor.exe -stop
	/home/leo/Arduino/hardware/Arduino_STM32/tools/linux/serial_upload ttyUSB0 1 2 $(TARGET).bin
	@ArduinoSerialMonitor.exe -run

flash: all
	arm-none-eabi-gdb --batch \
		-ex 'target extended-remote /dev/ttyBmpGdb' \
		-x $(OPENCM3_DIR)/scripts/black_magic_probe_flash.scr \
		$(TARGET).elf

info:
	~/Arduino/hardware/Arduino_STM32/tools/linux64/stm32flash/stm32flash /dev/ttyUSB0

disable_write_protection:
	~/Arduino/hardware/Arduino_STM32/tools/linux64/stm32flash/stm32flash -k /dev/ttyUSB0

.PHONY: tags
tags: $(SRC)
	rm -f tags qqq?.tags
	ctags -R . \
		$(TAGS) \
		$(OPENCM3_DIR)/lib/stm32/*.c \
		$(OPENCM3_DIR)/lib/stm32/common/*.c \
		$(OPENCM3_DIR)/lib/stm32/f1/*.c \
		$(OPENCM3_DIR)/lib/cm3/*.c \
		$(OPENCM3_DIR)/include/libopencm3/stm32/*.h \
		$(OPENCM3_DIR)/include/libopencm3/stm32/f1/*.h \
		$(OPENCM3_DIR)/include/libopencm3/stm32/common/*.h \
		$(OPENCM3_DIR)/include/libopencm3/cm3/*.h
	grep -v f24.h tags      > qqq1.tags
	grep -v f24.c qqq1.tags > qqq2.tags
	mv qqq2.tags tags
	rm -f qqq?.tags



-include $(OBJ:.o=.d)
