!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CM3	522_main.cpp	/^namespace CM3$/;"	n	file:
CR1	522_main.cpp	/^uint32_t CR1() { return SPI_CR1(SPI1) ; }$/;"	f
G_n	522_main.cpp	/^static int G_n = 0;$/;"	v	file:
GetStatusCodeName	../rfid/src/MFRC522.cpp	/^const __FlashStringHelper *MFRC522::GetStatusCodeName(MFRC522::StatusCode code	\/\/\/< One of the StatusCode enums.$/;"	f	class:MFRC522
GetStatusCodeName	../rfid/src/MFRC522Debug.cpp	/^const __FlashStringHelper *MFRC522Debug::GetStatusCodeName(MFRC522::StatusCode code	\/\/\/< One of the StatusCode enums.$/;"	f	class:MFRC522Debug
MIFARE_Decrement	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_Decrement(	byte blockAddr, \/\/\/< The block (0-0xff) number.$/;"	f	class:MFRC522
MIFARE_GetValue	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_GetValue(byte blockAddr, int32_t *value) {$/;"	f	class:MFRC522
MIFARE_Increment	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_Increment(	byte blockAddr, \/\/\/< The block (0-0xff) number.$/;"	f	class:MFRC522
MIFARE_OpenUidBackdoor	../rfid/src/MFRC522Hack.cpp	/^bool MFRC522Hack::MIFARE_OpenUidBackdoor(const bool logErrors) const {$/;"	f	class:MFRC522Hack
MIFARE_Read	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_Read(	byte blockAddr, 	\/\/\/< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.$/;"	f	class:MFRC522
MIFARE_Restore	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_Restore(	byte blockAddr \/\/\/< The block (0-0xff) number.$/;"	f	class:MFRC522
MIFARE_SetAccessBits	../rfid/src/MFRC522.cpp	/^void MFRC522::MIFARE_SetAccessBits(	byte *accessBitBuffer,	\/\/\/< Pointer to byte 6, 7 and 8 in the sector trailer. Bytes [0..2] will be set.$/;"	f	class:MFRC522
MIFARE_SetUid	../rfid/src/MFRC522Hack.cpp	/^bool MFRC522Hack::MIFARE_SetUid(const byte *newUid, const byte uidSize, const bool logErrors) const {$/;"	f	class:MFRC522Hack
MIFARE_SetValue	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_SetValue(byte blockAddr, int32_t value) {$/;"	f	class:MFRC522
MIFARE_Transfer	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_Transfer(	byte blockAddr \/\/\/< The block (0-0xff) number.$/;"	f	class:MFRC522
MIFARE_TwoStepHelper	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_TwoStepHelper(	byte command,	\/\/\/< The command to use$/;"	f	class:MFRC522
MIFARE_Ultralight_Write	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_Ultralight_Write(	byte page, 		\/\/\/< The page (2-15) to write to.$/;"	f	class:MFRC522
MIFARE_UnbrickUidSector	../rfid/src/MFRC522Hack.cpp	/^bool MFRC522Hack::MIFARE_UnbrickUidSector(const bool logErrors) const {$/;"	f	class:MFRC522Hack
MIFARE_Write	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::MIFARE_Write(	byte blockAddr, \/\/\/< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The page (2-15) to write to.$/;"	f	class:MFRC522
PCD_AntennaOff	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_AntennaOff() {$/;"	f	class:MFRC522
PCD_AntennaOn	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_AntennaOn() {$/;"	f	class:MFRC522
PCD_Authenticate	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PCD_Authenticate(byte command,		\/\/\/< PICC_CMD_MF_AUTH_KEY_A or PICC_CMD_MF_AUTH_KEY_B$/;"	f	class:MFRC522
PCD_CalculateCRC	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PCD_CalculateCRC(	byte *data,		\/\/\/< In: Pointer to the data to transfer to the FIFO for CRC calculation.$/;"	f	class:MFRC522
PCD_ClearRegisterBitMask	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_ClearRegisterBitMask(	PCD_Register reg,	\/\/\/< The register to update. One of the PCD_Register enums.$/;"	f	class:MFRC522
PCD_CommunicateWithPICC	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PCD_CommunicateWithPICC(	byte command,		\/\/\/< The command to execute. One of the PCD_Command enums.$/;"	f	class:MFRC522
PCD_DumpVersionToSerial	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_DumpVersionToSerial() {$/;"	f	class:MFRC522
PCD_GetAntennaGain	../rfid/src/MFRC522.cpp	/^byte MFRC522::PCD_GetAntennaGain() {$/;"	f	class:MFRC522
PCD_Init	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_Init(	byte chipSelectPin,		\/\/\/< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)$/;"	f	class:MFRC522
PCD_Init	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_Init() {$/;"	f	class:MFRC522
PCD_MIFARE_Transceive	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PCD_MIFARE_Transceive(	byte *sendData,		\/\/\/< Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.$/;"	f	class:MFRC522
PCD_NTAG216_AUTH	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PCD_NTAG216_AUTH(byte* passWord, byte pACK[]) \/\/Authenticate with 32bit password$/;"	f	class:MFRC522
PCD_PerformSelfTest	../rfid/src/MFRC522.cpp	/^bool MFRC522::PCD_PerformSelfTest() {$/;"	f	class:MFRC522
PCD_ReadRegister	../rfid/src/MFRC522.cpp	/^byte MFRC522::PCD_ReadRegister(	PCD_Register reg	\/\/\/< The register to read from. One of the PCD_Register enums.$/;"	f	class:MFRC522
PCD_ReadRegister	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_ReadRegister(	PCD_Register reg,	\/\/\/< The register to read from. One of the PCD_Register enums.$/;"	f	class:MFRC522
PCD_Reset	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_Reset() {$/;"	f	class:MFRC522
PCD_SetAntennaGain	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_SetAntennaGain(byte mask) {$/;"	f	class:MFRC522
PCD_SetRegisterBitMask	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_SetRegisterBitMask(	PCD_Register reg,	\/\/\/< The register to update. One of the PCD_Register enums.$/;"	f	class:MFRC522
PCD_StopCrypto1	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_StopCrypto1() {$/;"	f	class:MFRC522
PCD_TransceiveData	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PCD_TransceiveData(	byte *sendData,		\/\/\/< Pointer to the data to transfer to the FIFO.$/;"	f	class:MFRC522
PCD_WriteRegister	../rfid/src/MFRC522.cpp	/^void MFRC522::PCD_WriteRegister(	PCD_Register reg,	\/\/\/< The register to write to. One of the PCD_Register enums.$/;"	f	class:MFRC522
PICC_DumpDetailsToSerial	../rfid/src/MFRC522.cpp	/^void MFRC522::PICC_DumpDetailsToSerial(Uid *uid	\/\/\/< Pointer to Uid struct returned from a successful PICC_Select().$/;"	f	class:MFRC522
PICC_DumpDetailsToSerial	../rfid/src/MFRC522Extended.cpp	/^void MFRC522Extended::PICC_DumpDetailsToSerial(TagInfo *tag	\/\/\/< Pointer to TagInfo struct returned from a successful PICC_Select().$/;"	f	class:MFRC522Extended
PICC_DumpISO14443_4	../rfid/src/MFRC522Extended.cpp	/^void MFRC522Extended::PICC_DumpISO14443_4(TagInfo *tag)$/;"	f	class:MFRC522Extended
PICC_DumpMifareClassicSectorToSerial	../rfid/src/MFRC522.cpp	/^void MFRC522::PICC_DumpMifareClassicSectorToSerial(Uid *uid,			\/\/\/< Pointer to Uid struct returned from a successful PICC_Select().$/;"	f	class:MFRC522
PICC_DumpMifareClassicToSerial	../rfid/src/MFRC522.cpp	/^void MFRC522::PICC_DumpMifareClassicToSerial(	Uid *uid,			\/\/\/< Pointer to Uid struct returned from a successful PICC_Select().$/;"	f	class:MFRC522
PICC_DumpMifareUltralightToSerial	../rfid/src/MFRC522.cpp	/^void MFRC522::PICC_DumpMifareUltralightToSerial() {$/;"	f	class:MFRC522
PICC_DumpToSerial	../rfid/src/MFRC522.cpp	/^void MFRC522::PICC_DumpToSerial(Uid *uid	\/\/\/< Pointer to Uid struct returned from a successful PICC_Select().$/;"	f	class:MFRC522
PICC_DumpToSerial	../rfid/src/MFRC522Extended.cpp	/^void MFRC522Extended::PICC_DumpToSerial(TagInfo *tag)$/;"	f	class:MFRC522Extended
PICC_GetType	../rfid/src/MFRC522.cpp	/^MFRC522::PICC_Type MFRC522::PICC_GetType(byte sak		\/\/\/< The SAK byte returned from PICC_Select().$/;"	f	class:MFRC522
PICC_GetType	../rfid/src/MFRC522Extended.cpp	/^MFRC522::PICC_Type MFRC522Extended::PICC_GetType(TagInfo *tag		\/\/\/< The TagInfo returned from PICC_Select().$/;"	f	class:MFRC522Extended
PICC_GetTypeName	../rfid/src/MFRC522.cpp	/^const __FlashStringHelper *MFRC522::PICC_GetTypeName(PICC_Type piccType	\/\/\/< One of the PICC_Type enums.$/;"	f	class:MFRC522
PICC_GetTypeName	../rfid/src/MFRC522Debug.cpp	/^const __FlashStringHelper *MFRC522Debug::PICC_GetTypeName(MFRC522::PICC_Type piccType	\/\/\/< One of the PICC_Type enums.$/;"	f	class:MFRC522Debug
PICC_HaltA	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PICC_HaltA() {$/;"	f	class:MFRC522
PICC_IsNewCardPresent	../rfid/src/MFRC522.cpp	/^bool MFRC522::PICC_IsNewCardPresent() {$/;"	f	class:MFRC522
PICC_IsNewCardPresent	../rfid/src/MFRC522Extended.cpp	/^bool MFRC522Extended::PICC_IsNewCardPresent() {$/;"	f	class:MFRC522Extended
PICC_PPS	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::PICC_PPS()$/;"	f	class:MFRC522Extended
PICC_PPS	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::PICC_PPS(TagBitRates sendBitRate,	          \/\/\/< DS$/;"	f	class:MFRC522Extended
PICC_REQA_or_WUPA	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	byte command, 		\/\/\/< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA$/;"	f	class:MFRC522
PICC_ReadCardSerial	../rfid/src/MFRC522.cpp	/^bool MFRC522::PICC_ReadCardSerial() {$/;"	f	class:MFRC522
PICC_ReadCardSerial	../rfid/src/MFRC522Extended.cpp	/^bool MFRC522Extended::PICC_ReadCardSerial() {$/;"	f	class:MFRC522Extended
PICC_RequestA	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PICC_RequestA(	byte *bufferATQA,	\/\/\/< The buffer to store the ATQA (Answer to request) in$/;"	f	class:MFRC522
PICC_RequestATS	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::PICC_RequestATS(Ats *ats) $/;"	f	class:MFRC522Extended
PICC_Select	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PICC_Select(	Uid *uid,			\/\/\/< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.$/;"	f	class:MFRC522
PICC_Select	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::PICC_Select(	Uid *uid,			\/\/\/< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.$/;"	f	class:MFRC522Extended
PICC_WakeupA	../rfid/src/MFRC522.cpp	/^MFRC522::StatusCode MFRC522::PICC_WakeupA(	byte *bufferATQA,	\/\/\/< The buffer to store the ATQA (Answer to request) in$/;"	f	class:MFRC522
RST_PIN	522_main.cpp	54;"	d	file:
SR	522_main.cpp	/^uint32_t SR() { return SPI_SR(SPI1) ; }$/;"	f
SS_PIN	522_main.cpp	53;"	d	file:
TCL_Deselect	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::TCL_Deselect(TagInfo *tag)$/;"	f	class:MFRC522Extended
TCL_Transceive	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::TCL_Transceive(PcbBlock *send, PcbBlock *back)$/;"	f	class:MFRC522Extended
TCL_Transceive	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::TCL_Transceive(TagInfo *tag, byte *sendData, byte sendLen, byte *backData, byte *backLen)$/;"	f	class:MFRC522Extended
TCL_TransceiveRBlock	../rfid/src/MFRC522Extended.cpp	/^MFRC522::StatusCode MFRC522Extended::TCL_TransceiveRBlock(TagInfo *tag, bool ack, byte *backData, byte *backLen)$/;"	f	class:MFRC522Extended
dumpUL	522_main.cpp	/^void dumpUL()$/;"	f
kk	522_main.cpp	/^void kk()$/;"	f
loop	522_main.cpp	/^void loop() {$/;"	f
setup	522_main.cpp	/^void setup() $/;"	f
